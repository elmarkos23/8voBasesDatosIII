//Marco Ayala//8va Sistema //Paralelo Adb.facturas.find();//Realizar las siguientes operaciones:
//a. total de re registrosdb.getCollection('facturas').count()
//b. Obtener las facturas con fecha de emisión posterior al 23/02/2014 y número menor a 1500. Ordenar por región y cuit del cliente db.facturas.find({'fechaEmision':{$gt:ISODate('2014-02-23')},nroFactura:{$lt:1500}}).sort({'cliente.region':1,'cliente.cuit':1});
//c. Obtener sólo los datos de cliente de las facturas donde se haya comprado “CORREA 10mm”. Ordenar por apellido del cliente. db.facturas.find({'item.producto':'CORREA 10mm'}).sort({'cliente.apellido':1});
//d.Obtener sólo nombre y apellido de cliente, de las facturas con número entre 2500 y 3000. db.facturas.find({nroFactura:{$gte:2500},nroFactura:{$lte:3000}},{_id:0,'cliente.nombre':1,'cliente.apellido':1,'nroFactura':1});
//e. Obtener sólo la fecha de vencimiento de las facturas 5000, 6000, 7000 y 8000db.facturas.find({nroFactura:5000,nroFactura:6000,nroFactura:7000,nroFactura:8000},{'fechaVencimiento':1});
//f. Obtener las facturas de los clientes cuyo apellido comience con Z. Ordenar por número de factura y devolver solo las primeras 5db.facturas.find({'cliente.apellido':/^Z/},{}).sort({nroFactura:1}).limit(5);/* g. Obtener sólo los números de factura en las que la región sea “CENTRO” o la condición de pago sea “CONTADO”. Ordenar descendentemente por número de factura y devolver de la 5 a la 10. */db.facturas.find({$or:[{'cliente.region':'CENTRO'},{'condPago':'CONTADO'}]},{}).sort({nroFactura:-1}).skip(4).limit(5);/* h. Obtener las facturas de todos los clientes que no sean de apellido “Zavasi” ni “Malinez”. */db.facturas.find({$nor:[{'cliente.apellido':'Zavasi'},{'cliente.apellido':'Malinez'}]},{});/* i. Obtener sólo el nombre del producto de las facturas donde se haya comprado 15 unidades de dicho producto.*/db.facturas.find({'item.cantidad':15},{'item.producto.$':1});
